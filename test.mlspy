

;; (define def-cars/cdrs (\ (n)
;;     (begin
;;         (= cars/cdrs (\ (s f n)
;;             (if (zero? n)
;;                 ()
;;                 (begin
;;                     (if (equal? s "c")
;;                         ()
;;                         (begin
;;                             (eval `(define ,(string->symbol (string-append s "ar")) ,(\ (x) (f (car x))) ))
;;                             (eval `(define ,(string->symbol (string-append s "dr")) ,(\ (x) (f (cdr x)))))))
;;                     (cars/cdrs 
;;                         (string-append s "a") 
;;                         (\ (x) (f (car x))) 
;;                         (sub1 n))
;;                     (cars/cdrs 
;;                         (string-append s "d") 
;;                         (\ (x) (f (cdr x)))
;;                         (sub1 n))))))
;;         (cars/cdrs "c" (\ (x) x) n))))


(define def-cars/cdrs (\ (n)
    (begin
        (= cars/cdrs (\ (s f n)
            (if (zero? n)
                ()
                (begin
                    (if (or (equal? s "c") (equal? s "ca") (equal? s "cd")) ;; don't define cr car or cdr
                        ()
                        (eval `(define ,(string->symbol (string-append s "r")) ,f)))
                    (cars/cdrs 
                        (string-append s "a") 
                        (\ (x) (f (car x))) 
                        (sub1 n))
                    (cars/cdrs 
                        (string-append s "d") 
                        (\ (x) (f (cdr x)))
                        (sub1 n))))))
        (cars/cdrs "c" (\ (x) x) n))))
(def-cars/cdrs 4)

(= test '('(1 2) 2 3))
test
(car test)
(car (car test))
(cdr (car test))

(cdar test)